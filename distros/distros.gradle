// This is a utility file used by differing distributions to pull in modules they're interested in

// Without at least the base plugin weird things happen, like destinationDir for Zip tasks being null
apply plugin: 'base'

// TODO: With module bundling here can probably discard the early artifact resolution in the main Gradles!
// for testing consider how to make the nanoware projects pull from the nanoware snapshot repo rather than default?
// easy enough to publish to a specific Artifactory repo, but pulling specifically hasn't been done before
// on a kinda-sorta related note remember that applet modules are bundled but then cache locally ..

// We use both Maven Central and our own Artifactory instance, which contains module builds, extra libs, and so on
repositories {
    // External libs - jcenter is Bintray and is supposed to be a superset of Maven Central, but do both just in case
    jcenter()
    mavenCentral()

    // MovingBlocks Artifactory instance for libs not readily available elsewhere plus our own libs
    maven {
        url "http://artifactory.terasology.org/artifactory/virtual-repo-live"
    }
    
    // TODO MYSTERY: As of November 7th 2011 virtual-repo-live could no longer be relied on for latest snapshots - Pro feature?
    // We've been using it that way for *years* and nothing likewise changed in the area for years as well. This seems to work ....
    maven {
        url "http://artifactory.terasology.org/artifactory/terasology-snapshot-local"
    }
    
    // Snowplow repository for the snowplow dependency of the server facade
    maven {
	url "http://maven.snplow.com/releases"
    }
}

configurations {
    modules {
        description = 'Modules without dependencies'
        // This is needed as otherwise any included module would also get copied in with engine libs etc
        // TODO: this will block the feature enhancement to support third party libs in modules - unless reading those in explicitly? But then their transitives?
        transitive = false
    }
    facades {
        description = 'Facades with dependencies'
    }
}

// If the execution was supplied with an extraModules property then include those modules as well
dependencies {
    if (project.hasProperty('extraModules')) {
        extraModules.tokenize(' ,').each { String dependency ->
            logger.lifecycle('Extra module: ' + dependency)
            dependencies {
                modules(group: 'org.terasology.modules', name: dependency, version: '+')
            }
        }
    } else {
        logger.info "No extra modules provided"
    }
	if (project.hasProperty('useFacadeServer') && project.property('useFacadeServer') == "true") {
        logger.lifecycle("Extra facade: Server")
        dependencies {
            facades(group: 'org.terasology.web', name: 'FacadeServer', version: '+')
        }
	} else {
        logger.info "Not using Facade Server"
    }
}

task distroPC (type: Zip) {
    description = "Adds modules and facades to a PC distribution of the game. Exact modules and facades are declared in a distro dir like iota"

    archiveName = zipFileName
    duplicatesStrategy = 'exclude'

    // We base this distro on the PC version, copied in by Jenkins
    from zipTree('Terasology.zip')

    // And what we really want to do is add the modules indicated by the gradle.properties under the distro running this
    from(configurations.modules) {
        into "modules"
    }

    // We also want to add the facades given by the gradle.properties file
    from(configurations.facades) {
        into "libs"
    }
    if (project.hasProperty('useFacadeServer') && project.property('useFacadeServer') == "true") {
        // Search through the list of facades to find the FacadeServer jar
        configurations.facades.asFileTree.each {
            if (it.name.contains("FacadeServer")) {
                // Copy the contents of the launchScripts folder from the FacadeSerer jar into the home directory
                // while also not copying the folder itself
                from(zipTree(it)) {
                    exclude "launchScripts"
                    include "launchScripts/**"
                    eachFile { fileCopyDetails ->
                        fileCopyDetails.path = fileCopyDetails.path.replace("launchScripts/", "")
                    }
                }
            }
        }
        into ""

        if (new File('FacadeServer-frontend.zip').exists()) {
            //Copy the frontend files (the zip should be put in distros/omega by Jenkins)
            from(zipTree('FacadeServer-frontend.zip')) {
                into "FacadeServer-frontend"
            }
        }
    }
    //TODO: May need to be hardened against duplicates if transitive modules/libs are later supported (or more added to base)
}
